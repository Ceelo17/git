verifica o estado da branch
git status

adiciona um arquivo para stage
	git add file.txt

adiciona todos os arquivos para stage
	git add .

deletar um arquivo específico - passar para unstage
	git rm --cached file.txt

deletar todos os arquivos - passar para unstage
o -r significa de maneira recursiva
o ponto seleciona todos os arquivos
	git rm --cached -r .

commitar
	git commit -m ""


4 estados

untracted - não rastreado
	- após adicionar o arquivo vai para staged
unmodified - não modificado
	- após modificar o arquivo vai para modified
staged - preparado
	- após commitar o arquivo vai para unmodified
modified - modificado
	- após descartar alterações o arquivo vai para unmodified

untracked - não rastreado pelo git
tracked (unmodified, modified, staged) - rastreado pelo git

cenário que um arquivo se encontra em dois estados ao mesmo tempo
	- é possível que um arquivo esteja em dois estados ao mesmo tempo, por exemplo, ao modificar um arquivo e adiciona-lo passando para stage e após isso modificar novamente, o git cria uma cópia do arquivo em stage e caso não seja adicionado a nova alteração e seja feito o commit, somente o que está em stage será commitado

faz a comparação de dois arquivos (versão modificada e a versão não modificada) mostrando a diferença do que foi modificado, usa o arquivo modificado x arquivo commitado
	git diff

caso o arquivo esteja já em stage deve utilizar --cached ou --staged
	git diff --cached
	git diff --staged

lista todas as alterações (commits) do mais recente para o mais antigo
mostra o sha-1 código
head aponta para o último commit
	git log

configura o email e o nome
	git config --global user.email
	git config --global user.name

se aparecer : ao final do git bash quer dizer que tem mais arquivos para baixo e para sair dessa configuração aperte q de "quite"

lista todas as alterações (commits) sem o nome do author, nem a data e o email, somente com o hash e o nome do commit
	git log --oneline

lista um número específico de commits que devem aparecer
	git log -n
	git log -1
	git log -3

lista o histórico de commits com as diferenças (patches) de cada commit
	git log -p

lista o histórico de commits de uma branch específica sem necessariamente estar nela
	git log nomedabranch --oneline

lista um resumo estático das alterações de cada commit
	git log --stat
	git log --shortstat --oneline

altera a mensagem do último commit ou é possível adicionar arquivos nesse commit
	git commit --amend -m ""
	git commit --amend --no-edit (commita sem alterar a mensagem do commit)
	git commit --amend (abre o editor vim)
para editar o commit via vim aperte a tecla I para mudar para INSERT, altere a mensagem e aperte ESC para sair do modo edição, para salvar :wq (write and quite) e para sair sem salvar :q!
deve utilizar o amend com cuidado pois caso a branch seja compartilhada ele exclui o último hash e commita um novo para alterar a mensagem do commit ou fazer alterações no arquivo, caso alguém esteja trabalhando no mesmo commit estará em uma versão antiga e que com o --amend que foi deletada podendo perder algum processo

é possível alterar o editor padrão (vim) para outro editor da sua esolha com uma interface mais amigável, como por exemplo o visual studio code, nele somente alterando, salvando e fechando-o já realiza as alterações sem precisar dos comandos do vim (é necessário já ter instalado o outro editor)
	git config --global core.editor "code --wait"

abre o visual studio code diretamente na pasta
	code .

alterna entre os commits para visualizar os arquivos como estavam naquele commit e útil caso o projeto esteja sendo executado
	git checkout código hash

caso queira descartar todas as mudanças em stage para a última versão conhecida, esse comando irá descartar todas as mudanças em stage não será parcialmente, caso seja um arquivo novo ou que não tenha versões anteriores, untracked este comando não irá funcionar pois ele volta para a última versão conhecida deste arquivo e caso não tenha irá dar erro
	git checkout nomedoaquivo.txt

remove os arquivos não rastreados (untrackeds), a flag -f força a execução do comando
	git clean -f

remove arquivos rastreados da área de preparação (stage) se não houver ou se houver histórico antes
	git rm --cached nomedoarquivo.txt

remove arquivos rastreados da área de preparação (stage) somente se houver histórico antes
	git restore --staged nomedoarquivo.txt

volta totalmente o arquivo para o último commit (modificado e em preparação)
mesmo que o git add tenho sido feito irá remover
só não irá remover os arquivos sem rastreamento, pois o git não os conhece
	git reset --hard

arquivo gitignore faz com que arquivos que não tenham a necessidade de subir para o git sejam ignorados pelas suas extensões ou especificando cada arquivo
	*.extensão - irá ignorar todos os arquivos com essa extensão
	nomedoarquivo.txt - irá ignorar o arquivo específico

para parar de rastrear o arquivo no git, útil quando é necessário adicionar o arquivo ou extensões ao gitignore, porém já é um arquivo conhecido do git, neste caso o passado do arquivo ainda existe, mas a partir deste comandos em diante deixa de ser observado pelo git, o objetivo seria esse mesmo mantendo a rastreabilidade destas ações
	git update-index --skip-worktree nomedoarquivo.txt
	git update-index --no-skip-worktree nomedoarquivo.txt para rastrear o arquivo ou as extensões novamente


clonar um repositório sendo ele na nuvem ou local, mantém o histórico do git
	git clone repositorio clonerepositorio
	git clone https:repositorioremoto.com.br

adiciona um repositório
git remote add origin https:repositorioremoto.com.br

atualiza as informações da branch para a versão mais atual do repositório
	git pull

conceito do GitHub no qual é possível copiar um repositório para a sua conta
é possível acompanhar e comparar quando e o que foi alterado no repositório principal no repositório cópia
	fork

quando existe uma solicitação ou propostas de alterações de um contribuidor para o repositório main, é possível fazer a partir de um repositório fork, isso traz uma qualidade no código, pois outros usuários podem analisar e propor melhorias ou segestões
	pull request

quando alguma coisa foi reportada como defeituosa, bug, melhoria ou seugestõe por algum colaborador, fica visível para outros colaboradores no github
issues

um agrupamento de issues ou PR´s que representam marcos no projeto, como por exemplo, fases, objetivos, entre outros
	milestones

subir branch remotamente
	git push --set-upstream origin nomedabranch

deletar uma branch (localmente)
	git branch -d nomedabranch

deletar uma branch (repositório remoto)
não é removida localmente, caso ocorra o push a branch irá ser criada novamente
	git push --delete origin nomearam

renomear um branch (localmente)
	git branch -m nomedabranchnovo (caso esteja na branch)
	git branch -m nomedabranch nomedabranchnovo (caso steja em outra branch)

renomear uma branch (remotamente)
não é possível renomear uma branch remota, porém é possível seguir com um processo diferente
	1 passo deletar a branch remotamente - git push --delete origin nomedabrancherrado
	2 passo alterar o nome localmente - git branch -m nomedabranchcorreto
	3 passo executar novamente o comando para subir a branch remotamente com o nome correto - git push --set-upstream origin nomedabranchcorreto (caso não seja executado esse comando irá subir remotamente com o nome antigo que estava errado)

merge - mescla as alterações de uma branch para outra sempre trazendo as informações

verifica quais branchs não foram mergeadas
	git branch --no-merged